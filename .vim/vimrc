" plugin {{{1
if has('vim_starting')
	runtime! macros/matchit.vim
	set rtp+=$HOME/dotvim/bundle/enabler_vim
	let g:enabler#dirs=['/home/hsw/dotvim/bundle']
	runtime! plugin/enabler.vim
else
	Enableupdate
endif
Enable! cmdalias.vim
Enable hasksyn
Enable supertab
Enable vifm.vim
" Enable vim-bracketed-paste
Enable vim-colors-solarized
Enable vim-bufferline
Enable vim-commentary
Enable vim-eunuch
Enable vim-repeat
Enable vim-surround
Enable vim-sneak
Enable vim-startify
Enablemap vim-unimpaired nnoremap =P
Enablemap vim-unimpaired nnoremap =p
Enablemap vim-unimpaired nnoremap cod
Enablemap vim-unimpaired nnoremap coh
Enablemap vim-unimpaired nnoremap coi
Enablemap vim-unimpaired nnoremap col
Enablefiletype toml vim-toml
Enablecommand gitv Gitv
call enabler#Dependency('gitv', ['vim-fugitive'])
Enablecommand ag.vim Ag
Enablecommand syntastic SyntasticCheck
Enablecommand tagbar TagbarToggle
Enablecommand undotree UndotreeToggle
Enablecommand vim-bbye Bdelete
Enablecommand vim-shell MakeWithShell
call enabler#Dependency('vim-shell', ['vim-misc'])
Enable ctrlp.vim
Enable ctrlp-py-matcher
Enable vim-vinegar
" Enablemap vim-vinegar nnoremap -
" Enablefiletype netrw vim-vinegar
call enabler#Onload('vim-fugitive', 'let buf = bufnr("%") | bufdo doautocmd BufReadPost fugitive | exec "b".buf')

" set {{{1
filetype plugin indent on
set nocompatible
set undofile
set undodir=~/.vim/.undo
set viminfo+=n~/.vim/.viminfo
set backspace=2
set shiftwidth=2 tabstop=2 softtabstop=2
set history=9999
set mouse=nv
set scrolloff=2
set t_vb=
set autoindent
set hidden
set number
set relativenumber
set incsearch
set ignorecase
set smartcase
set laststatus=2
set timeoutlen=500
set updatetime=4000
set display=lastline
set gdefault
set lazyredraw
set showcmd
set tildeop
set wildmenu
set foldmethod=marker
set virtualedit=onemore
set wildignore+=*/Trash/*,*/tmp/*,*/.git/*,*/.hg/*,*.o,*.jpg,*.mp4,*.ogg,*.pdf,*.png,*.swo,*.swp
syntax enable
set background=dark
colorscheme solarized
set statusline=%<%F\ %h%m%r%=%-12.(%l,%c%V%)\ %P
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
highlight IncSearch term=standout cterm=standout ctermfg=8 ctermbg=11 gui=reverse

" map {{{1
let mapleader = ' '
no ; :
no : ;
no @; @:
nn <C-j> <C-e>
nn <C-k> <C-y>
nn <silent> <Leader>q :q<CR>
nn <silent> <Leader>x :x<CR>
nn <silent> <Leader>e :up<CR>
nn <silent> <Leader>w :up<Bar>:SyntasticCheck<CR>
nn <silent> <Leader>v :e $MYVIMRC<CR>
nn <silent> <C-p> :bp<CR>
nn <silent> <C-n> :bn<CR>
nn <silent> <C-@> :noh<CR>
nn <silent> <C-l> :noh<CR><C-l>
nn <Leader>m :make<CR><CR><CR>
nn mm :!sdcv <cword><CR>
ino ij <Esc>`^
ino <C-f> <Esc>`^
ino <C-j> <C-o>gj
ino <C-k> <C-o>gk
cno <C-j> <Down>
cno <C-k> <Up>
no! <C-h> <Left>
no! <C-l> <Right>
no! <C-a> <Home>
no! <C-e> <End>

" autocmd {{{1
augroup self
	au!
	au BufWinEnter * set formatoptions-=o
	au BufEnter,BufNewFile * silent! lcd %:p:h
	au BufWritePost $MYVIMRC so %
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	au BufReadPost,BufWrite * nn<buffer> q; q:
	au BufLeave /home/sid/Downloads/cs/**/*.in up
	au BufNewFile *.cpp r ~/.vim/template/template.cpp|1d|normal ]]
augroup END

"" ag.vim {{{1
let g:ag_prg="ag -U --hidden --vimgrep"
let g:ag_highlight=1

" bookmark {{{1
function! Jump(char) abort
	let [bufnr, line, column, rest] = getpos("'".a:char)
	if bufnr == 0 && line > 0 || bufnr("%") == bufnr
		execute "normal! '".a:char
	elseif bufnr == 0
		echohl ErrorMsg | echom "E20: Mark not set" | echohl None
	else
		execute "edit #".bufnr
	endif
endfunction
nnoremap <silent> ' :call Jump(nr2char(getchar()))<CR>

" " bufdo {{{1
" function! BufDo(command)
" 	let currBuff=bufnr("%")
" 	execute 'bufdo '.a:command
" 	execute 'buffer '.currBuff
" endfunction
" com! -nargs=+ -complete=command Bufdo call BufDo(<q-args>)

" clip {{{1
nn <silent> <C-c> :silent w !xsel -i<CR>
nn <silent> cp        :let @" = system('xsel -o')<CR>p
nn <silent> cP        :let @" = system('xsel -o')<CR>P
nn <silent> c<Leader>p :let @" = system('xsel -o')<Bar>normal =p<CR>
nn <silent> c<Leader>P :let @" = system('xsel -o')<Bar>normal =P<CR>
xn <silent> <C-c> y:call system('xsel -i', @")<CR>

" ctrlp {{{1
let g:ctrlp_map = '<Leader>o'
let g:ctrlp_show_hidden = 1
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_default_input = 0
let g:ctrlp_reuse_window = 'netrw\|help\|quickfix\|startify'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_user_command = 'cd %s && ag -U --hidden -g ""'

" join {{{1
nn J :set operatorfunc=Joinoperator<CR>g@
nn gJ :set operatorfunc=GJoinoperator<CR>g@
nn JJ Jj
func! Joinoperator(submode)
	'[,']join
endfunc
func! GJoinoperator(submode)
	'[,']join!
endfunc

" netrw {{{1
let g:netrw_keepdir = 0
let g:netrw_localrmdir = 'rm -r'

" syntastic {{{1
let g:syntastic_mode_map = {"mode": "passive"}

" tagbar {{{1
nn <silent> <F5> :TagbarToggle<CR>

" undotree {{{1
nn <silent> <F6> :UndotreeToggle<CR>

" vim-bbye {{{1
nn <silent> <Leader>d :Bdelete<CR>

" vim-commentary {{{1
xmap <Leader>c  <Plug>Commentary
nmap <Leader>c  <Plug>Commentary
omap <Leader>c        <Plug>Commentary
nmap <Leader>cc <Plug>CommentaryLine
nmap c<Leader>c       <Plug>ChangeCommentary
nmap <Leader>cu <Plug>Commentary<Plug>Commentary

" vim-sneak {{{1
map s <Plug>Sneak_s
map S <Plug>Sneak_S
let g:sneak#s_next = 1

" vim-surround {{{1
let g:surround_no_mappings = 1
nmap d<Leader>s <Plug>Dsurround
nmap c<Leader>s <Plug>Csurround
nmap <Leader>s  <Plug>Ysurround
nmap <Leader>S  <Plug>YSurround
nmap <Leader>ss <Plug>Yssurround
nmap <Leader>SS <Plug>YSsurround
xmap <Leader>s  <Plug>VSurround
xmap <Leader>S  <Plug>VgSurround
nn <silent> <Plug>DSurroundSpace f<Space>xF<Space>x
	\:call repeat#set("\<Plug>DSurroundSpace")<CR>
nmap d<Leader>s<Space> <Plug>DSurroundSpace

" " vim-unimpaired {{{1
" nmap <Leader>p =p
" nmap <Leader>P =P

" visualstar {{{1
function! VSetSearch()
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, '\'), '\n', '\\n', 'g')
	let @s = temp
endfunction
xn * :<C-u>call VSetSearch()<CR>//<CR>N
xn # :<C-u>call VSetSearch()<CR>??<CR>N

" yank {{{1
nn <silent> y :set opfunc=Yank<CR>g@
nn yy yy']
xn y ygv<Esc>
nn Y y$$
function! Yank(type, ...)
	if a:type == 'line'
		exe "normal! '[V']y']"
	else
		exe "normal! `[v`]y`]"
	endif
endfunction

